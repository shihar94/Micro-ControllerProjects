
example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002bc  080002bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002bc  080002bc  000102bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c0  080002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080002c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080002c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016d2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000773  00000000  00000000  000216fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00021e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  00022070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000db3e  00000000  00000000  00022210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000244a  00000000  00000000  0002fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054253  00000000  00000000  00032198  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000863eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  00086468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002a4 	.word	0x080002a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080002a4 	.word	0x080002a4

08000108 <delay>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void delay (int x)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
  volatile int i,j;
  for (i=0 ; i < x ; i++)
 8000110:	2300      	movs	r3, #0
 8000112:	60fb      	str	r3, [r7, #12]
 8000114:	e005      	b.n	8000122 <delay+0x1a>
  {
     j++;
 8000116:	68bb      	ldr	r3, [r7, #8]
 8000118:	3301      	adds	r3, #1
 800011a:	60bb      	str	r3, [r7, #8]
  for (i=0 ; i < x ; i++)
 800011c:	68fb      	ldr	r3, [r7, #12]
 800011e:	3301      	adds	r3, #1
 8000120:	60fb      	str	r3, [r7, #12]
 8000122:	68fb      	ldr	r3, [r7, #12]
 8000124:	687a      	ldr	r2, [r7, #4]
 8000126:	429a      	cmp	r2, r3
 8000128:	dcf5      	bgt.n	8000116 <delay+0xe>
  }
  return;
 800012a:	46c0      	nop			; (mov r8, r8)
}
 800012c:	46bd      	mov	sp, r7
 800012e:	b004      	add	sp, #16
 8000130:	bd80      	pop	{r7, pc}
	...

08000134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000134:	b580      	push	{r7, lr}
 8000136:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  while (1)
	  {
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000138:	2380      	movs	r3, #128	; 0x80
 800013a:	019b      	lsls	r3, r3, #6
 800013c:	480a      	ldr	r0, [pc, #40]	; (8000168 <main+0x34>)
 800013e:	2200      	movs	r2, #0
 8000140:	0019      	movs	r1, r3
 8000142:	f000 f86d 	bl	8000220 <HAL_GPIO_WritePin>
	    delay(500000);
 8000146:	4b09      	ldr	r3, [pc, #36]	; (800016c <main+0x38>)
 8000148:	0018      	movs	r0, r3
 800014a:	f7ff ffdd 	bl	8000108 <delay>
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800014e:	2380      	movs	r3, #128	; 0x80
 8000150:	019b      	lsls	r3, r3, #6
 8000152:	4805      	ldr	r0, [pc, #20]	; (8000168 <main+0x34>)
 8000154:	2201      	movs	r2, #1
 8000156:	0019      	movs	r1, r3
 8000158:	f000 f862 	bl	8000220 <HAL_GPIO_WritePin>
	    delay(500000);
 800015c:	4b03      	ldr	r3, [pc, #12]	; (800016c <main+0x38>)
 800015e:	0018      	movs	r0, r3
 8000160:	f7ff ffd2 	bl	8000108 <delay>
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000164:	e7e8      	b.n	8000138 <main+0x4>
 8000166:	46c0      	nop			; (mov r8, r8)
 8000168:	48000800 	.word	0x48000800
 800016c:	0007a120 	.word	0x0007a120

08000170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000174:	e7fe      	b.n	8000174 <NMI_Handler+0x4>

08000176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800017a:	e7fe      	b.n	800017a <HardFault_Handler+0x4>

0800017c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000180:	46c0      	nop			; (mov r8, r8)
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}

08000186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800018a:	46c0      	nop			; (mov r8, r8)
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}

08000190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000194:	f000 f832 	bl	80001fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000198:	46c0      	nop			; (mov r8, r8)
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80001a2:	46c0      	nop			; (mov r8, r8)
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}

080001a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a8:	480d      	ldr	r0, [pc, #52]	; (80001e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ae:	490e      	ldr	r1, [pc, #56]	; (80001e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b0:	4a0e      	ldr	r2, [pc, #56]	; (80001ec <LoopForever+0xe>)
  movs r3, #0
 80001b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001b4:	e002      	b.n	80001bc <LoopCopyDataInit>

080001b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ba:	3304      	adds	r3, #4

080001bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c0:	d3f9      	bcc.n	80001b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001c2:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001c4:	4c0b      	ldr	r4, [pc, #44]	; (80001f4 <LoopForever+0x16>)
  movs r3, #0
 80001c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001c8:	e001      	b.n	80001ce <LoopFillZerobss>

080001ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001cc:	3204      	adds	r2, #4

080001ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d0:	d3fb      	bcc.n	80001ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001d2:	f7ff ffe4 	bl	800019e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001d6:	f000 f841 	bl	800025c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001da:	f7ff ffab 	bl	8000134 <main>

080001de <LoopForever>:

LoopForever:
    b LoopForever
 80001de:	e7fe      	b.n	80001de <LoopForever>
  ldr   r0, =_estack
 80001e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001ec:	080002c4 	.word	0x080002c4
  ldr r2, =_sbss
 80001f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80001f4:	20000024 	.word	0x20000024

080001f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001f8:	e7fe      	b.n	80001f8 <ADC1_IRQHandler>
	...

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <HAL_IncTick+0x1c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	001a      	movs	r2, r3
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <HAL_IncTick+0x20>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	18d2      	adds	r2, r2, r3
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <HAL_IncTick+0x20>)
 800020e:	601a      	str	r2, [r3, #0]
}
 8000210:	46c0      	nop			; (mov r8, r8)
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	20000000 	.word	0x20000000
 800021c:	20000020 	.word	0x20000020

08000220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	0008      	movs	r0, r1
 800022a:	0011      	movs	r1, r2
 800022c:	1cbb      	adds	r3, r7, #2
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	801a      	strh	r2, [r3, #0]
 8000232:	1c7b      	adds	r3, r7, #1
 8000234:	1c0a      	adds	r2, r1, #0
 8000236:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000238:	1c7b      	adds	r3, r7, #1
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d004      	beq.n	800024a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000240:	1cbb      	adds	r3, r7, #2
 8000242:	881a      	ldrh	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000248:	e003      	b.n	8000252 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800024a:	1cbb      	adds	r3, r7, #2
 800024c:	881a      	ldrh	r2, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <__libc_init_array>:
 800025c:	b570      	push	{r4, r5, r6, lr}
 800025e:	2600      	movs	r6, #0
 8000260:	4d0c      	ldr	r5, [pc, #48]	; (8000294 <__libc_init_array+0x38>)
 8000262:	4c0d      	ldr	r4, [pc, #52]	; (8000298 <__libc_init_array+0x3c>)
 8000264:	1b64      	subs	r4, r4, r5
 8000266:	10a4      	asrs	r4, r4, #2
 8000268:	42a6      	cmp	r6, r4
 800026a:	d109      	bne.n	8000280 <__libc_init_array+0x24>
 800026c:	2600      	movs	r6, #0
 800026e:	f000 f819 	bl	80002a4 <_init>
 8000272:	4d0a      	ldr	r5, [pc, #40]	; (800029c <__libc_init_array+0x40>)
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <__libc_init_array+0x44>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	42a6      	cmp	r6, r4
 800027c:	d105      	bne.n	800028a <__libc_init_array+0x2e>
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	00b3      	lsls	r3, r6, #2
 8000282:	58eb      	ldr	r3, [r5, r3]
 8000284:	4798      	blx	r3
 8000286:	3601      	adds	r6, #1
 8000288:	e7ee      	b.n	8000268 <__libc_init_array+0xc>
 800028a:	00b3      	lsls	r3, r6, #2
 800028c:	58eb      	ldr	r3, [r5, r3]
 800028e:	4798      	blx	r3
 8000290:	3601      	adds	r6, #1
 8000292:	e7f2      	b.n	800027a <__libc_init_array+0x1e>
 8000294:	080002bc 	.word	0x080002bc
 8000298:	080002bc 	.word	0x080002bc
 800029c:	080002bc 	.word	0x080002bc
 80002a0:	080002c0 	.word	0x080002c0

080002a4 <_init>:
 80002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	469e      	mov	lr, r3
 80002ae:	4770      	bx	lr

080002b0 <_fini>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr
